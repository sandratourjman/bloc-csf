### Exercises

> 1. What is time complexity and what is its relation to algorithms?


A: Time complexity is a function that estimates the time it takes for a program to execute. In relation to algorithms, we calculate how quickly the time it takes to run the program as it grows relative to the amount of input we feed into the program. 

> 2. What is runtime?


A: Runtime is the physical time duration of an algorithm. It is interchanged with time complexity.

> 3. How is the runtime of an algorithm calculated?

A: To determine the time complexity of an algorithm, we add up how many instructions the algorithm will execute as a function of the size of its input, then we simplify the expression to the largest term and drop any constants.

> 4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

A: 0(1), 0(log n), 0(n), 0(n log n), 0(n^2), 0(n^3) ,0(2^n)

> 5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

A: Waiting in line at a VIP experience to meet a singer would be an example of constant growth rate. If there were 10 people or 100 people or 200 people, the process (or runtime) would remain the same. You wait in line for your turn, then you would get your photo taken. Same for every other person in line. 

> 6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false

A: The time complexity for a linear search would be linear growth rate because this funciton only has 1 for loop and will execute directly in proporation to the number of input in the array. 

> 7. Determine the time complexity of the following snippet of code:

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION



A: The time complexity for foo is quadratic growth rate because of the next for loops.

> 8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

A: The time complexity for fibonacci is exponential growth rate because it is a recusive function. 


> 9. Out of the code snippets you just saw, which is the most time efficient?



A: The linear search is the most time efficient code snippet, having a time complexity of 0(n). 